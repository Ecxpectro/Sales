@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]
@if (_country is null)
{
    <div class="spinner" />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> @_country.Name
                <a class="btn btn-sm btn-primary float-end" href="/states/create/@_country.Id"><i class="oi oi-plus"></i> New State</a>
                <a class="btn btn-sm btn-success float-end mx-2" href="/countries"><i class="oi oi-arrow-thick-left"></i> Return</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Search State..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Apply Filter</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Clear</button>
                </div>
            </div>

            <Pagination CurrentPage="_currentPage" TotalPages="_totalPages" SelectedPage="SelectedPageAsync" />

            <GenericList MyList="_states">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>State</th>
                                <th style="width:140px">City Count</th>
                                <th style="width:260px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var state in _states!)
                            {
                                <tr>
                                    <td>
                                        @state.Name
                                    </td>
                                    <td>
                                        @state.CitiesNumber
                                    </td>
                                    <td>
                                        <a class="btn btn-sm btn-info" href="/states/details/@state.Id"><i class="oi oi-list" /> Details</a>
                                        <a class="btn btn-sm btn-warning" href="/states/edit/@state.Id"><i class="oi oi-pencil" /> Edit</a>
                                        <button class="btn btn-sm btn-danger" @onclick=@(() => DeleteAsync(state.Id))><i class="oi oi-trash" /> Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>

            </GenericList>
        </div>
    </div>
}


@code {
    private Country? _country;
    private List<State>? _states;
    private int _currentPage = 1;
    private int _totalPages;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure you want to delete this data?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Yes"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/states/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
    private async Task SelectedPageAsync(int page)
    {
        _currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string urlStates = string.Empty;
        string urlTotalPages = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            urlStates = $"api/states?id={Id}&page={page}";
            urlTotalPages = $"api/states/totalPages?id={Id}";
        }
        else
        {
            urlStates = $"api/states?id={Id}&page={page}&filter={Filter}";
            urlTotalPages = $"api/states/totalPages?id={Id}&filter={Filter}";
        }


        var responseHppt = await repository.Get<Country>($"api/countries/{Id}");
        var responseHppt2 = await repository.Get<List<State>>(urlStates);
        var responseHppt3 = await repository.Get<int>(urlTotalPages);

        if (responseHppt2.Error)
        {
            if (responseHppt2.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHppt2.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        _country = responseHppt.Response;
        _states = responseHppt2.Response;
        _totalPages = responseHppt3.Response;

    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

}
