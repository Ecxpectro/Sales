@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="_editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
        <div class="mb-3">
            <label>Country name:</label>
            <div>
                <InputText class="form-control" @bind-Value="@Country.Name"/>
                <ValidationMessage For="@(() => Country.Name)"/>
            </div>
        </div>
        <button class="btn btn-primary" type="submit">Save changes</button>
        <button class="btn btn-success" @onclick="ReturnAction" type="button">Return</button>
    
</EditForm>

@code {
    private EditContext _editContext = null!;

    [Parameter]
    [EditorRequired]
    public Country Country { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        _editContext = new(Country);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = _editContext.IsModified();
        if (!formWasModified || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmation",
            Text = "Do you want to navigate away and lose the form data?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Yes"
        });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
