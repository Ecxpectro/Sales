@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]
<h3>Countries</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary" href="/countries/create">New Country</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Search country..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Apply filter</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Clear</button>
    </div>
</div>


<Pagination CurrentPage="_currentPage" TotalPages="_totalPages" SelectedPage="SelectedPageAsync" />

<GenericList MyList="Countries">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Country</th>
                    <th style="width:220px;">State Count</th>
                    <th style="width:260px;"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            @country.Name
                        </td>
                        <td>
                            @country.StatesNumber
                        </td>
                        <td>
                            <a class="btn btn-info" href="/countries/details/@country.Id">Details</a>
                            <a class="btn btn-warning" href="/countries/edit/@country.Id">Edit</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))>Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>

</GenericList>

@code {
    public List<Country>? Countries { get; set; }
    private int _currentPage = 1;
    private int _totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string urlCountries = string.Empty;
        string urlTotalPages = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            urlCountries = $"api/countries?page={page}";
            urlTotalPages = $"api/countries/totalPages";
        }
        else
        {
            urlCountries = $"api/countries?page={page}&filter={Filter}";
            urlTotalPages = $"api/countries/totalPages?filter={Filter}";
        }


        var responseCountries = await repository.Get<List<Country>>(urlCountries);
        var responseTotalPages = await repository.Get<int>(urlTotalPages);

        Countries = responseCountries.Response;
        _totalPages = responseTotalPages.Response;

    }
    private async Task SelectedPageAsync(int page)
    {
        _currentPage = page;
        await LoadAsync(page);
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure you want to delete this data?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Yes"
        });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/countries/{id}");

        if (responseHttp.Error)
        {
            if(responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

}
