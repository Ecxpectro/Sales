@page "/states/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@if (_state is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@_state.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/cities/create/@_state.Id">Add City</a>
        <a class="btn btn-success" href="/countries/details/@_state.CountryId">Return</a>
    </div>

    <GenericList MyList="_state.Cities!.ToList()">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>City</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var city in _state.Cities!)
                    {
                        <tr>
                            <td>
                                @city.Name
                            </td>
                            <td>
                                <a class="btn btn-warning" href="/cities/edit/@city.Id">Edit</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(city.Id))>Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>

    </GenericList>

}

@code {
    private State? _state;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure you want to delete this data?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Yes"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/cities/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<State>($"/api/states/{Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        _state = responseHttp.Response;
    }
}
